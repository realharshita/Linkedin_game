import tkinter as tk

root = tk.Tk()
root.title("Queens Game")

BOARD_SIZE = 8
CELL_SIZE = 50
BOARD_WIDTH = BOARD_SIZE * CELL_SIZE
BOARD_HEIGHT = BOARD_SIZE * CELL_SIZE

canvas = tk.Canvas(root, width=BOARD_WIDTH, height=BOARD_HEIGHT)
canvas.pack()

for row in range(BOARD_SIZE):
    for col in range(BOARD_SIZE):
        color = "white" if (row + col) % 2 == 0 else "gray"
        canvas.create_rectangle(col * CELL_SIZE, row * CELL_SIZE, (col + 1) * CELL_SIZE, (row + 1) * CELL_SIZE, fill=color)

board = [[""] * BOARD_SIZE for _ in range(BOARD_SIZE)]
queens_count = 0

def handle_click(event):
    global queens_count
    x, y = event.x // CELL_SIZE, event.y // CELL_SIZE
    if board[y][x] == "":
        mark_cannot_place(x, y)
    elif board[y][x] == "X":
        remove_mark(x, y)
    elif board[y][x] == "Q":
        remove_queen(x, y)
    else:
        place_queen(x, y)

def mark_cannot_place(col, row):
    global queens_count
    board[row][col] = "X"
    canvas.create_text(col * CELL_SIZE + CELL_SIZE // 2, row * CELL_SIZE + CELL_SIZE // 2, text="X", font=("Arial", 20))

def remove_mark(col, row):
    global queens_count
    board[row][col] = ""
    canvas.delete(tk.ALL)
    redraw_board()
    update_queens_count()

def place_queen(col, row):
    global queens_count
    if can_place_queen(row, col):
        board[row][col] = "Q"
        queens_count += 1
        canvas.create_text(col * CELL_SIZE + CELL_SIZE // 2, row * CELL_SIZE + CELL_SIZE // 2, text="Q", font=("Arial", 20))
        update_queens_count()

def remove_queen(col, row):
    global queens_count
    board[row][col] = ""
    queens_count -= 1
    canvas.delete(tk.ALL)
    redraw_board()
    update_queens_count()

def can_place_queen(row, col):
    for i in range(BOARD_SIZE):
        if board[i][col] == "Q" or board[row][i] == "Q":
            return False
    for i in range(BOARD_SIZE):
        if (row + i < BOARD_SIZE and col + i < BOARD_SIZE and board[row + i][col + i] == "Q") or \
           (row - i >= 0 and col + i < BOARD_SIZE and board[row - i][col + i] == "Q") or \
           (row + i < BOARD_SIZE and col - i >= 0 and board[row + i][col - i] == "Q") or \
           (row - i >= 0 and col - i >= 0 and board[row - i][col - i] == "Q"):
            return False
    return True

def redraw_board():
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            color = "white" if (row + col) % 2 == 0 else "gray"
            canvas.create_rectangle(col * CELL_SIZE, row * CELL_SIZE, (col + 1) * CELL_SIZE, (row + 1) * CELL_SIZE, fill=color)
            if board[row][col] == "X":
                canvas.create_text(col * CELL_SIZE + CELL_SIZE // 2, row * CELL_SIZE + CELL_SIZE // 2, text="X", font=("Arial", 20))
            elif board[row][col] == "Q":
                canvas.create_text(col * CELL_SIZE + CELL_SIZE // 2, row * CELL_SIZE + CELL_SIZE // 2, text="Q", font=("Arial", 20))

def update_queens_count():
    queens_left = BOARD_SIZE - queens_count
    if queens_left > 0:
        result_label.config(text=f"Queens left to place: {queens_left}")
    else:
        result_label.config(text="All queens placed!")

check_button = tk.Button(root, text="Check Solution", command=check_solution)
check_button.pack()

reset_button = tk.Button(root, text="Reset Board", command=reset_board)
reset_button.pack()

result_label = tk.Label(root, text="")
result_label.pack()

def check_solution():
    if is_valid_solution():
        result_label.config(text="Valid solution!")
    else:
        result_label.config(text="Invalid solution!")

def is_valid_solution():
    queens_positions = [(row, col) for row in range(BOARD_SIZE) for col in range(BOARD_SIZE) if board[row][col] == "Q"]
    for i in range(len(queens_positions)):
        for j in range(i + 1, len(queens_positions)):
            if attacks(queens_positions[i], queens_positions[j]):
                return False
    return True

def attacks(pos1, pos2):
    row1, col1 = pos1
    row2, col2 = pos2
    return row1 == row2 or col1 == col2 or abs(row1 - row2) == abs(col1 - col2)

def reset_board():
    global queens_count
    queens_count = 0
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            board[row][col] = ""
    canvas.delete(tk.ALL)
    redraw_board()
    result_label.config(text="")

canvas.bind("<Button-1>", handle_click)

root.mainloop()
